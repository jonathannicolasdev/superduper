// References:
// https://pris.ly/d/prisma-schema
// https://github.com/remix-run/indie-stack/blob/main/prisma/schema.prisma
// https://github.com/planetscale/beam/blob/main/prisma/schema.prisma

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// -----------------------------------------------------------------------------
// User
// -----------------------------------------------------------------------------

model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name     String
  email    String  @unique
  username String? @unique
  phone    String? @unique

  password UserPassword?
  roleId   String?
  role     UserRole?     @relation(fields: [roleId], references: [id])

  artworks    Artwork[]
  artists     Artist[]
  exhibitions Exhibition[]

  @@index([roleId])
}

model UserPassword {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  hash String

  userId String @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  @@index([userId])
}

model UserRole {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  users     User[]

  sequence    Int?
  symbol      String  @unique // "ADMIN" | "MANAGER" | "EDITOR"
  name        String  @unique // "Administrator" | "Manager" | "Editor"
  description String?
}

model Artwork {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  userId   String?
  user     User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  artistId String?
  artist   Artist? @relation(fields: [artistId], references: [id])

  title       String
  slug        String?
  date        DateTime
  medium      String // canvas, acrylic
  size        String // width, height, length
  description String?

  images ArtworkImage[]

  exhibition   Exhibition? @relation(fields: [exhibitionId], references: [id])
  exhibitionId String?

  @@index([userId])
  @@index([artistId])
  @@index([exhibitionId])
}

model ArtworkImage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  url String

  artwork   Artwork? @relation(fields: [artworkId], references: [id])
  artworkId String?

  @@index([artworkId])
}

model Artist {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String?
  user      User?    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)

  slug String?
  name String
  bio  String

  image       ArtistImage?
  artworks    Artwork[]
  exhibitions Exhibition[]

  @@index([userId])
}

model ArtistImage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  url String

  artist   Artist? @relation(fields: [artistId], references: [id])
  artistId String? @unique

  @@index([artistId])
}

model Exhibition {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  title       String
  slug        String?
  date        DateTime?
  description String? @db.Text

  images   ExhibitionImage[]
  artists  Artist[]
  artworks Artwork[]

  user   User?   @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId String?

  @@index([userId])
}

model ExhibitionImage {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  url String

  exhibition   Exhibition? @relation(fields: [exhibitionId], references: [id])
  exhibitionId String?

  @@index([exhibitionId])
}
